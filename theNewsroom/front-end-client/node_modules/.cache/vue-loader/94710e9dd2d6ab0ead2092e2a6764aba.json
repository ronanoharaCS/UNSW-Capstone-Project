{"remainingRequest":"/Users/liamdale/OneDrive/Uni/COMP/20T3/capstone-project-comp3900-w17a-212-monolith/212MonolithFinalSoftwareQuality/theNewsroom/front-end-client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liamdale/OneDrive/Uni/COMP/20T3/capstone-project-comp3900-w17a-212-monolith/212MonolithFinalSoftwareQuality/theNewsroom/front-end-client/src/views/Trends.vue?vue&type=style&index=0&id=3cf01a30&scoped=true&lang=css&","dependencies":[{"path":"/Users/liamdale/OneDrive/Uni/COMP/20T3/capstone-project-comp3900-w17a-212-monolith/212MonolithFinalSoftwareQuality/theNewsroom/front-end-client/src/views/Trends.vue","mtime":1605530430616},{"path":"/Users/liamdale/OneDrive/Uni/COMP/20T3/capstone-project-comp3900-w17a-212-monolith/212MonolithFinalSoftwareQuality/theNewsroom/front-end-client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liamdale/OneDrive/Uni/COMP/20T3/capstone-project-comp3900-w17a-212-monolith/212MonolithFinalSoftwareQuality/theNewsroom/front-end-client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/liamdale/OneDrive/Uni/COMP/20T3/capstone-project-comp3900-w17a-212-monolith/212MonolithFinalSoftwareQuality/theNewsroom/front-end-client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/liamdale/OneDrive/Uni/COMP/20T3/capstone-project-comp3900-w17a-212-monolith/212MonolithFinalSoftwareQuality/theNewsroom/front-end-client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/liamdale/OneDrive/Uni/COMP/20T3/capstone-project-comp3900-w17a-212-monolith/212MonolithFinalSoftwareQuality/theNewsroom/front-end-client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKdGQgewogICAgdGV4dC1hbGlnbjogY2VudGVyICFpbXBvcnRhbnQ7Cn0KLmxpc3QtdGl0bGUgewogICAgZm9udC1zaXplOiAxNnB4ICFpbXBvcnRhbnQ7Cn0KLml0ZW0gewogICAgYmFja2dyb3VuZDogW107Cn0KLml0ZW06aG92ZXIgewogICAgYmFja2dyb3VuZDogZ2hvc3R3aGl0ZTsKfQo="},{"version":3,"sources":["Trends.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Trends.vue","sourceRoot":"src/views","sourcesContent":["<template>\n<div class=\"trends\">\n    <template>\n        <v-container fluid>\n\n            <v-layout wrap>\n                <v-flex xs12 md4>\n                    <!-- For now this filters the datatable, really we want it to produce a popup with possible matches on 'enter', and selecting a match will produce the corresponding topic popup. This field ought to be in the same position of the page on both Topics and Trends, to show continuity -->\n                    <v-card flat tile width='100%'>\n                        <v-list ripple=false expand flat rounded dense>\n\n                            <!-- Search, calendar and media are subgroups in a the group Filters, allowing us to easily modify this entire list as a single element -->\n                            <v-list-group value=\"true\" color=\"none\">\n\n                                <template v-slot:activator>\n                                    <v-list-item-content>\n                                        <v-list-item-title class='font-weight-light list-title'>Filters</v-list-item-title>\n                                    </v-list-item-content>\n                                </template>\n                                <!-- Search -->\n                                <v-list-item>\n                                    <v-text-field @keyup.enter.native=\"searchTopic\" dense rounded filled v-model=\"keyword\" append-icon=\"mdi-magnify\" label=\"Search for a topic\" single-line hide-details />\n                                    <Search v-model=\"search\" />\n                                </v-list-item>\n                                <!-- Calendar -->\n                                 <v-list-item>\n                                    <v-menu ref=\"menu\" v-model=\"menu\" :close-on-content-click=\"false\" :return-value.sync=\"dates\" transition=\"scale-transition\" offset-y min-width=\"290px\">\n                                        <template v-slot:activator=\"{ on, attrs }\">\n                                            <v-text-field dense rounded filled v-model=\"dateRange\" label=\"Select time period\" append-icon=\"mdi-calendar\" single-line hide-details readonly v-bind=\"attrs\" v-on=\"on\" />\n                                        </template>\n                                        <v-date-picker v-model=\"dates\" :max='todaysDate' range no-title scrollable>\n                                            <v-spacer />\n                                            <v-btn text color=\"primary\" @click=\"saveDates\">\n                                                OK\n                                            </v-btn>\n                                        </v-date-picker>\n                                    </v-menu>\n                                </v-list-item>\n                            </v-list-group>\n                            <!-- Selected, Related and Saved topics are also presented as groups in the List, allowing us to open and close them easily to show their internal components. Selected is set to true so that it is shown automatically, whilst the others are closed by default -->\n                            <v-list-group value=\"true\" color=\"none\">\n                                <template v-slot:activator>\n                                    <v-list-item-content>\n                                        <v-list-item-title class='font-weight-light list-title'>Selected Topics</v-list-item-title>\n                                    </v-list-item-content>\n                                </template>\n                                <v-list-item-group value=\"true\" color=\"none\">\n                                    <v-list-item class='item' v-for=\"(item, index) in getSelected\" :key=\"index\" >\n                                        <v-list-item-title @click='open(item)' v-text=\"item.name\" />\n                                        <v-icon v-if='index == 0' color=\"#FF42DC\">mdi-circle</v-icon>\n                                        <v-icon v-if='index == 1' color=\"#0096DB\">mdi-circle</v-icon>\n                                        <v-icon v-if='index == 2' color=\"#FF9D00\">mdi-circle</v-icon>\n                                        <v-icon v-if='index == 3' color='#66DB00'>mdi-circle</v-icon>\n                                        <v-icon v-if='index == 4' color=\"#DB0004\">mdi-circle</v-icon>\n                                        <v-btn icon @click='removeSelected(item)'>\n                                            <v-icon color=\"grey lighten-1\">mdi-minus-circle</v-icon>\n                                        </v-btn>\n                                    </v-list-item>\n                                </v-list-item-group>\n                            </v-list-group>\n                            <v-list-group color=\"none\">\n                                <template v-slot:activator>\n                                    <v-list-item-content>\n                                        <v-list-item-title class='font-weight-light list-title'>Related Topics</v-list-item-title>\n                                    </v-list-item-content>\n                                </template>\n                                <v-list-item-group color=\"none\">\n                                    <v-list-item  class='item' v-for=\"item in related_topics\" :key=\"item.id\">\n                                        <v-list-item-title @click='open(item)' v-text=\"item.name\" />\n                                        <v-btn icon @click='add(item)'>\n                                            <v-icon color=\"grey lighten-1\">mdi-plus-circle</v-icon>\n                                        </v-btn>\n                                    </v-list-item>\n                                </v-list-item-group>\n                            </v-list-group>\n                            <template v-if=\"!$auth.loading & $auth.isAuthenticated\">\n                                <v-list-group color=\"none\">\n                                    <template v-slot:activator>\n                                        <v-list-item-content>\n                                            <v-list-item-title class='font-weight-light list-title'>Saved Trends</v-list-item-title>\n                                        </v-list-item-content>\n                                    </template>\n                                    <v-list-item-group color=\"none\">\n                                        <v-list-item class='item' v-for=\"config in configs\" :key=\"config.id\" @click=\"setSelected(config.topics)\">\n                                            <v-list-item-title v-text=\" config.title\" />\n                                        </v-list-item>\n                                    </v-list-item-group>\n                                </v-list-group>\n                            </template>\n                            <v-list-item>\n                                <v-spacer />\n                                <SaveTrend v-if=\"!$auth.loading & $auth.isAuthenticated\" v-on:saved=\"getConfigs()\"/>\n                                <v-btn rounded depressed @click=\"reset\">\n                                    Reset </v-btn>\n                                <HelpTrends />\n                            </v-list-item>\n                        </v-list>\n                    </v-card>\n                </v-flex>\n                <v-spacer />\n                <v-flex align-center xs12 md8>\n                    <template>\n                        <div>\n                            <apexchart type=\"line\" :options=\"options\" :series=\"trends\"></apexchart>\n                        </div>\n                    </template>\n                </v-flex>\n                <Popup v-model=\"popup\" />\n                <Replace v-model=\"replace\" />\n                <v-col />\n            </v-layout>\n        </v-container>\n    </template>\n\n</div>\n</template>\n\n<script>\nimport Popup from \"../components/common/Popup\";\nimport Replace from \"../components/common/Replace\";\nimport SaveTrend from \"../components/common/SaveTrend\";\nimport HelpTrends from \"../components/common/HelpTrends\";\nimport Search from \"../components/common/Search\"\nimport {\n    mapGetters,\n    mapState,\n    mapMutations\n} from 'vuex';\nimport ALL_TOPICS_WITH_FILTER from '../graphql/TopicsAndArticleCount.gql'\nimport TOPIC_ARTICLES_DATE from '../graphql/TopicArticlesByDate.gql'\nimport USER_CONFIGS from \"../graphql/AllOfAUsersConfigurations.gql\"\nexport default {\n    name: \"Trends\",\n    components: {\n        Popup,\n        SaveTrend,\n        HelpTrends,\n        Search,\n        Replace\n    },\n    data: () => ({\n        search: false,\n        popup: false,\n        start_date: null,\n        end_date: null,\n        dates: [],\n        keyword: '',\n        menu: false,\n        related_topics: [],\n        configs: [],\n        result: null,\n        trends: [],\n        date: null,\n        topic_id: null,\n        usr_id: '',\n        skipQuery: true,\n        replace: false,\n        options: {\n            stroke: {\n                curve: 'smooth',\n            },\n            colors: [\n                '#FF42DC', '#0096DB', '#FF9D00', '#66DB00', '#DB0004', \n            ],\n            xaxis: {\n                type: 'datetime'\n            },\n            yaxis: {\n                label: {\n                    text: 'Number of Articles'\n                },\n                min: 0,\n                forceNiceScale: true\n            },\n            tooltip: {\n                enabled: true,\n                followCursor: true,\n                shared: true,\n            },\n            markers: {\n                size: 0,\n                hover: {\n                    sizeOffset: 6\n                }\n            },\n            grid: {\n                borderColor: '#f1f1f1',\n            },\n            legend: {\n                horizontalAlign: 'center',\n                position: 'bottom',\n                onItemHover: {\n                    highlightDataSeries: true\n                },\n            },\n            noData: {\n                text: 'Select topics to see how they trend over time!',\n                align: 'center',\n                verticalAlign: 'middle',\n                offsetX: 0,\n                offsetY: 0,\n                style: {\n                    color: undefined,\n                    fontSize: '14px',\n                    fontFamily: undefined\n                }\n            },\n            chart: {\n                selection: {\n                    enabled: true\n                },\n                toolbar: {\n                    show: true,\n                    offsetX: 0,\n                    offsetY: 0,\n                    tools: {\n                        download: true,\n                        selection: false,\n                        zoom: false,\n                        zoomin: true,\n                        zoomout: true,\n                        pan: true,\n                        reset: true,\n                        customIcons: []\n                    },\n                    export: {\n                        csv: {\n                            filename: undefined,\n                            columnDelimiter: ',',\n                            headerCategory: 'category',\n                            headerValue: 'value',\n                            dateFormatter(timestamp) {\n                                return new Date(timestamp).toDateString()\n                            }\n                        }\n                    },\n                    autoSelected: 'zoom'\n                },\n            },\n        },\n    }),\n    watch: {\n        getSelected: {\n            handler: function() {\n                this.callTrends()\n                if (this.getSelected.length == 0) {\n                    this.trends = []\n                }\n            },\n        },\n    },\n    apollo: {\n        related_topics: {\n            query: ALL_TOPICS_WITH_FILTER,\n            variables() {\n                return {\n                    limit: 5\n                }\n            },\n            update(data) {\n                return data.allTopics.nodes.map(a => ({\n                    id: a.id,\n                    name: a.name\n                }));\n            }\n        },\n        result: {\n            query: TOPIC_ARTICLES_DATE,\n            variables() {\n                return {\n                    topicId: this.topic_id,\n                    startdate: this.start_date,\n                    enddate: this.end_date\n                }\n            },\n            update(data) {\n                var result = {\n                    name: data.topicById.name, \n                    data: data.aggregatearticlecountbydays.nodes.map(a => ({\n                        x: a.x,\n                        y: a.y\n                    }))}\n                let index = this.trends.findIndex(item => item.name == result.name)\n                if (index == -1 ) {\n                    this.trends.push(result)\n                } else {\n                    this.trends[index] = result\n                }\n                this.checkRemove()\n            },\n            skip() {\n                return this.skipQuery\n            },\n        },\n        configs: {\n            query: USER_CONFIGS,\n            variables() {\n                var id\n                if (!this.$auth.loading && this.$auth.isAuthenticated) {\n                    id = this.$auth.user.sub\n                } else {\n                    id = ''\n                }\n                return {\n                    usrId: id\n                }\n            },\n            update(data) {\n                return data.allUserconfigurations.nodes.map(a => ({\n                    id: a.id,\n                    title: a.configName,\n                    topics: a.topicconfigurationsByUsrConfigId.nodes.map(b => ({\n                        id: b.topicId,\n                        name: b.topicName\n                    }))\n                }))\n            },\n            skip() {\n                return this.skipQuery\n            },\n        }\n    },\n    methods: {\n        checkRemove() {\n            if (this.getSelected.length != this.trends.length){\n                var i\n                for (i = 0; i < this.trends.length; i++) {\n                    let index = this.getSelected.findIndex(item => item.name == this.trends[i].name)\n                    if (index == -1) {\n                        this.trends.splice(index, 1)\n                    }\n                }\n            }\n        },\n        async callTrends() {\n            console.log(\"Fetching trend data for\", this.dateRange)\n            var i\n            for (i = 0; i < this.getSelected.length; i++) {\n                this.topic_id =  this.getSelected[i].id\n                this.$apollo.queries.result.skip = false\n                await this.$apollo.queries.result.refetch()\n            }\n            // This line is not redundant. It refreshes the value, particularly useful for automatically updating the graph when dates are changed.\n            this.trends = this.trends.map(a => a)\n            console.log('Trend data fetched.')\n        },\n        formatDate(date) {\n            let month = `${date.getMonth() + 1}`;\n            let day = `${date.getDate()}`;\n            const year = date.getFullYear();\n            if (month.length < 2) month = `0${month}`;\n            if (day.length < 2) day = `0${day}`;\n            return [year, month, day].join('-');\n        },\n        ...mapMutations([\n            'addSelected',\n            'removeSelected',\n            'openTopic',\n            'setSelected',\n            'emptySelected',\n            'searchTopicKeyword'\n        ]),\n        open(topic) {\n            this.popup = true\n            this.openTopic(topic)\n        },\n       saveDates() {\n            this.$refs.menu.save(this.dates)\n            if (this.dates[0] < this.dates[1]) {\n                this.start_date = this.dates[0]\n                this.end_date = this.dates[1]\n            } else {\n                this.start_date = this.dates[1]\n                this.end_date = this.dates[0]\n            }\n            this.dates = [this.start_date, this.end_date]\n            this.callTrends()\n        },\n        searchTopic() {\n            if (this.keyword != '') {\n                this.search = true\n                this.searchTopicKeyword(this.keyword)\n            }\n        },\n        reset() {\n            this.dates = []\n            this.end_date = new Date()\n            this.start_date = new Date()\n            this.start_date.setMonth(this.end_date.getMonth() - 1)\n            this.start_date = this.start_date.toISOString().slice(0, 10)                    \n            this.end_date = this.end_date.toISOString().slice(0, 10)\n            this.dates = [this.start_date, this.end_date]\n            this.emptySelected()\n        },\n        add(topic) {\n            if (this.numSelected == 5) {\n                this.replace = true\n            } else {\n                this.addSelected(topic)\n            }\n        },\n        async getConfigs() {\n            this.$apollo.queries.configs.skip = false\n            await this.$apollo.queries.configs.refetch()\n            console.log(\"Configurations fetched.\")\n        },\n    },\n    mounted: function() {\n        if (this.start_date == null) {\n            this.end_date = new Date()\n            this.start_date = new Date()\n            this.start_date.setMonth(this.end_date.getMonth() - 1)\n            this.start_date = this.start_date.toISOString().slice(0, 10)                    \n            this.end_date = this.end_date.toISOString().slice(0, 10)\n        }\n        this.dates = [this.start_date, this.end_date]\n        if (!this.$auth.loading && this.$auth.isAuthenticated) {\n            this.usr_id = this.$auth.user.sub\n        }\n        this.callTrends()\n        this.getConfigs()\n        console.log(\"Mounted\")\n    },\n    computed: {\n        ...mapState(['selected', 'related']),\n        ...mapGetters(['numSelected', 'getSelected', 'getRelated']),\n        todaysDate() {\n            const today = new Date();\n            return this.formatDate(today);\n        },\n        dateRange() {\n            return this.dates.join(' to ')\n        },\n    }\n}\n</script>\n\n<style scoped>\ntd {\n    text-align: center !important;\n}\n.list-title {\n    font-size: 16px !important;\n}\n.item {\n    background: [];\n}\n.item:hover {\n    background: ghostwhite;\n}\n</style>"]}]}